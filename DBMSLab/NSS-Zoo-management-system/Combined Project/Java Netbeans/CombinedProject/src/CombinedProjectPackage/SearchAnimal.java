/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchAnimal.java
 *
 * Created on 29-Apr-2014, 22:47:45
 */

package CombinedProjectPackage;

import inheritance_folder.Animal;
import inheritance_folder.Feeding;
import inheritance_folder.Manager;
import inheritance_folder.Staff;
import inheritance_folder.Vet;
import java.io.File;
import java.io.IOException;
//import com.mysql.jdbc.Connection;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author MF-Laptop
 */
public class SearchAnimal extends javax.swing.JFrame {

    private PreparedStatement prest;
    Animal A = new Animal();
    Staff S = new Staff();
    Manager M = new Manager();
    Vet V = new Vet();
    Feeding F = new Feeding();

    /** Creates new form SearchAnimal */
    public SearchAnimal() {
        initComponents();
        //displayImage(); //adding image
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AnimalSearchTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        AnimalSCB1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        AnimalSearch = new javax.swing.JButton();
        AnimalIDSearch = new javax.swing.JTextField();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        SearchName = new javax.swing.JTextField();
        SearchGender = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        img = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        AnimalSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        AnimalSearchTable.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(AnimalSearchTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 220, 800, 150);

        jLabel1.setText("Choose Table");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 20, 110, 30);

        AnimalSCB1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "animal", "habitat", "staff", "records", "general staff", "manager", "vet" }));
        AnimalSCB1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AnimalSCB1KeyPressed(evt);
            }
        });
        getContentPane().add(AnimalSCB1);
        AnimalSCB1.setBounds(110, 20, 140, 30);

        jLabel3.setText("Search by ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(260, 20, 150, 30);

        AnimalSearch.setText("Search");
        AnimalSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnimalSearchActionPerformed(evt);
            }
        });
        getContentPane().add(AnimalSearch);
        AnimalSearch.setBounds(580, 20, 180, 25);

        AnimalIDSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AnimalIDSearchFocusGained(evt);
            }
        });
        AnimalIDSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnimalIDSearchActionPerformed(evt);
            }
        });
        getContentPane().add(AnimalIDSearch);
        AnimalIDSearch.setBounds(410, 20, 130, 30);

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(Update);
        Update.setBounds(580, 60, 180, 25);

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete);
        Delete.setBounds(580, 100, 180, 25);

        jLabel2.setText("Search by Name");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(260, 60, 150, 30);

        jLabel4.setText("Search by Gender");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(260, 100, 150, 30);

        SearchName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchNameFocusGained(evt);
            }
        });
        getContentPane().add(SearchName);
        SearchName.setBounds(410, 60, 130, 22);

        SearchGender.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchGenderFocusGained(evt);
            }
        });
        getContentPane().add(SearchGender);
        SearchGender.setBounds(410, 100, 130, 22);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(580, 150, 180, 25);

        jLabel5.setText("NOTE: ONLY ONE SEARCH FIELD PER EXECUTION ALLOWED");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(30, 150, 520, 20);

        img.setText("Image Not Found");
        getContentPane().add(img);
        img.setBounds(790, 10, 200, 200);

        setSize(new java.awt.Dimension(1023, 436));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AnimalSCB1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AnimalSCB1KeyPressed
        
    if (evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)

{
    if (AnimalSCB1.getSelectedItem().equals("animal"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    
    }
    else if (AnimalSCB1.getSelectedItem().equals("habitat"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    }
    else if (AnimalSCB1.getSelectedItem().equals("staff"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
   
    }
    else if (AnimalSCB1.getSelectedItem().equals("records"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    
    }
    else if (AnimalSCB1.getSelectedItem().equals("feeding staff"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    
    }
    else if (AnimalSCB1.getSelectedItem().equals("manager"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    
    }
    else if (AnimalSCB1.getSelectedItem().equals("vet"))
    {
    AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    
    }
    
}

    }//GEN-LAST:event_AnimalSCB1KeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        AnimalIDSearch.setVisible(true);
        SearchName.setVisible(true);
        SearchGender.setVisible(true);
        jLabel3.setVisible(true);
        jLabel2.setVisible(true);
        jLabel4.setVisible(true);
    }//GEN-LAST:event_formWindowOpened

    private void AnimalSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnimalSearchActionPerformed
           String url = "jdbc:mysql://localhost:3306/";
        String dbName = "zoodb";
        String driver = "com.mysql.jdbc.Driver";
        String userName = "root";
        String password = "";
         SearchName.setEditable(true);
         SearchGender.setEditable(true);
         AnimalIDSearch.setEditable(true);
        //Resize all images
              JavaImageResizer obj=new JavaImageResizer();
              File folder = new File("..\\..\\..\\..\\ZooWebpage\\static\\images\\animals\\");
	    File[] listOfFiles = folder.listFiles();
		System.out.println("Total No of Files:"+listOfFiles.length);
              for(int i=101;i<101+listOfFiles.length;i++)
                  try {
                      obj.resize("..\\..\\..\\..\\ZooWebpage\\static\\images\\animals\\"+i+".jpg");
                  } catch (IOException ex) {
                      Logger.getLogger(SearchAnimal.class.getName()).log(Level.SEVERE, null, ex);
                  }
              
          if (AnimalSCB1.getSelectedItem().equals("animal"))
          {
          try
          {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql1 = "SELECT * FROM animal WHERE ANIMAL_ID LIKE ?";

                String sql2 = "SELECT * FROM animal WHERE ANIMAL_NAME LIKE ?";

                String sql3 = "SELECT * FROM animal WHERE GENDER LIKE ?";
                // Excute Query and send result set to rs
                //prest = conn.prepareStatement(sql1);
                //prest = conn.prepareStatement(sql2);
                prest = conn.prepareStatement(sql3);
                
                String id=AnimalIDSearch.getText();
                String pic_id="";
                String name=SearchName.getText();
                String gender=SearchGender.getText();
                
                System.out.println("ID: "+(String)id+"\tName: "+(String)name+"\tGender: "+(String)(gender));
               
                    if(id.equals(""))
                    {
                        pic_id="LION";
                        System.out.println(pic_id+" is the ID");
                        if(name.equals(""))
                        
                        {
                            prest = conn.prepareStatement(sql3);
                            prest.setString(1,gender);
                        }
                        else
                        {
                            prest = conn.prepareStatement(sql2);
                            prest.setString(1,name);
                            if(!(gender.equals("")))
                                    {
                                        prest = conn.prepareStatement(sql3);
                                        prest.setString(2,gender);}
                        }
                    }
                    else
                    if(name.equals(""))
                    {
                        prest = conn.prepareStatement(sql1);
                        if(gender.equals(""))
                        {prest.setString(1,id);
                            pic_id=id.substring(3);
                            System.out.println(pic_id+" is the ID");}
                        else
                        {
                            prest.setString(1,id);
                            prest = conn.prepareStatement(sql3);
                            prest.setString(2,gender);
                        }
                    }
                else
                    {
                        prest = conn.prepareStatement(sql1);
                        prest = conn.prepareStatement(sql2);
                        if(gender.equals(""))
                        {
                        prest.setString(1,AnimalIDSearch.getText());
                        prest.setString(2,SearchName.getText());
                
                }
                        else
                        {
                             prest = conn.prepareStatement(sql1);
                        prest = conn.prepareStatement(sql2);
                        prest = conn.prepareStatement(sql3);
                             prest.setString(1,AnimalIDSearch.getText());
                            prest.setString(2,SearchName.getText());
                            prest.setString(3,SearchGender.getText());
                        }
                    }
               
                ImageIcon icon = new ImageIcon("..\\..\\..\\..\\ZooWebpage\\static\\images\\animals\\"+pic_id+".jpg");
                 img.setIcon(icon);

                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

          if (AnimalSCB1.getSelectedItem().equals("habitat"))
                {
                    
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
                SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM habitat WHERE AREA_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

          if (AnimalSCB1.getSelectedItem().equals("staff"))
                {
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
               
                     SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM staff WHERE STAFF_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

                if (AnimalSCB1.getSelectedItem().equals("records"))
                {
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
               
                     SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM records WHERE RECORD_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

                if (AnimalSCB1.getSelectedItem().equals("general staff"))
                {
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
               
                     SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM general_staff WHERE GENERAL_STAFF_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

                if (AnimalSCB1.getSelectedItem().equals("manager"))
                {
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
               
                    SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM manager WHERE MANAGER_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

                if (AnimalSCB1.getSelectedItem().equals("vet"))
                {
                    ImageIcon icon = new ImageIcon("");
                 img.setIcon(icon);
               
                     SearchName.setEditable(false);
                 SearchGender.setEditable(false);
                try
                {
                Class.forName(driver).newInstance();
                Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                System.out.println("Database Connection Successful");
                // Set Up SQL
                String sql = "SELECT * FROM vet WHERE VET_ID LIKE ?";
                // Excute Query and send result set to rs
                prest = conn.prepareStatement(sql);
                prest.setString(1,AnimalIDSearch.getText());
                ResultSet rs = prest.executeQuery();
                //Retrieve by column name
                AnimalSearchTable.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                prest.close();
                // Close the connection to the database
                conn.close();
                }
                catch (Exception e)
                {
                e.printStackTrace();
                }
                }

    }//GEN-LAST:event_AnimalSearchActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed

          String url = "jdbc:mysql://localhost:3306/";
String dbName = "zoodb";
String driver = "com.mysql.jdbc.Driver";
String userName = "root";
String password = "";

SearchName.setEditable(true);
         SearchGender.setEditable(true);
         AnimalIDSearch.setEditable(true);
        
          if (AnimalSCB1.getSelectedItem().equals("animal"))
          {
          try
          {
          Class.forName(driver).newInstance();
          Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
          System.out.println("Database Connection Successful");

          // Set Up SQL
          String sql = " UPDATE animal set ANIMAL_NAME = ?, ANIMAL_TYPE = ?, "
                    + " GENDER = ?, DOB = ?, DIET_TYPE = ?, DIET = ?, STATUS = ?, HEALTH= ?, "
                    +" SPACE_REQUIRED_ACRES = ? WHERE ANIMAL_ID = ? ";
     
         A.setAnimal_Name(AnimalSearchTable.getValueAt(0, 1).toString());
         A.setAnimal_Type(AnimalSearchTable.getValueAt(0, 2).toString());
         A.setGender(AnimalSearchTable.getValueAt(0, 3).toString());
         A.setDOB(AnimalSearchTable.getValueAt(0, 4).toString());
         A.setDiet_Type(AnimalSearchTable.getValueAt(0, 5).toString());
         A.setDiet(AnimalSearchTable.getValueAt(0, 6).toString());
         A.setStatus(AnimalSearchTable.getValueAt(0, 7).toString());
         A.setHealth(AnimalSearchTable.getValueAt(0, 8).toString());
         A.setSpace_Required_Acres(Integer.parseInt(AnimalSearchTable.getValueAt(0, 9).toString()));

          // Excute Query and send result set to rs
          prest = conn.prepareStatement(sql);
          
          prest.setString(1, A.getAnimal_Name());
          prest.setString(2, A.getAnimal_Type());
          prest.setString(3, A.getGender());
          prest.setString(4, A.getDOB());
          prest.setString(5, A.getDiet_Type());
          prest.setString(6, A.getDiet());
          prest.setString(7, A.getStatus());
          prest.setString(8, A.getHealth());
          prest.setInt(9, A.getSpace_Required_Acres());
          prest.setString(10, AnimalIDSearch.getText());
          

          prest.executeUpdate();
          JOptionPane.showMessageDialog(rootPane, "Update Successfull!");

          // Close the connection to the database
          conn.close();
          prest.close();
          }
          
          catch (SQLException s)
          {
          System.out.println("SQL statement is not executed!");
          JOptionPane.showMessageDialog(rootPane, "Update NOT Successfull!");
          }


          catch (Exception e)
          {
          e.printStackTrace();
          }
          }

if (AnimalSCB1.getSelectedItem().equals("staff"))
          {
          try
          {
          Class.forName(driver).newInstance();
          Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
          System.out.println("Database Connection Successful");

          // Set Up SQL
          String sql = "UPDATE staff set NAME = ?, GENDER = ?, PPS_NUMBER = ?"
                  +",DOB = ?, START_OF_EMPLOYMENT = ?, ADDRESS = ?, CONTACT_NUMBER = ?, EMAIL= ?, "
                    +" SALARY = ? WHERE STAFF_ID =? ";



              //java.util.Date p=new SimpleDateFormat("YYYY-MM-DD").parse(AnimalSearchTable.getValueAt(0, 4).toString());
//System.out.println(p);
              
        S.setName(AnimalSearchTable.getValueAt(0, 1).toString());
        S.setGender(AnimalSearchTable.getValueAt(0, 2).toString());
        S.setPPS_no(AnimalSearchTable.getValueAt(0, 3).toString());
        S.setDOB(AnimalSearchTable.getValueAt(0, 4).toString());
        S.setStart_of_Employment(AnimalSearchTable.getValueAt(0, 5).toString());
        S.setAddress(AnimalSearchTable.getValueAt(0, 6).toString());
        S.setContact_Number(Integer.parseInt(AnimalSearchTable.getValueAt(0, 7).toString()));
        S.setEmail(AnimalSearchTable.getValueAt(0, 8).toString());
        S.setSalary(Double.parseDouble(AnimalSearchTable.getValueAt(0, 9).toString()));
        
        //System.out.println(
        
          // Excute Query and send result set to rs
          prest = conn.prepareStatement(sql);



          prest.setString(1, S.getName());
          prest.setString(2, S.getGender());
          prest.setString(3, S.getPPS_no());
          prest.setString(4, S.getDOB());
          prest.setString(5, S.getStart_of_Employment());
          prest.setString(6, S.getAddress());
          prest.setInt(7, S.getContact_Number());
          prest.setString(8, S.getEmail());
          prest.setDouble(9, S.getSalary());
          prest.setString(10, AnimalIDSearch.getText());


          prest.executeUpdate();
          JOptionPane.showMessageDialog(rootPane, "Update Successfull!");

          // Close the connection to the database
          conn.close();
          prest.close();
          }

          catch (SQLException s)
          {
          System.out.println("SQL statement is not executed!");
          JOptionPane.showMessageDialog(rootPane, "Update NOT Successfull!");
          }

          catch (Exception e)
          {
          e.printStackTrace();
          }
          }
else 
{
    System.out.println("Table other than Animal or Staff Selected");
    System.out.println("Table has foreign keys. Do not update");
    JOptionPane.showMessageDialog(rootPane, "ERROR: Update Runs only for Animal & Staff");
}


    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed

          String url = "jdbc:mysql://localhost:3306/";
String dbName = "zoodb";
String driver = "com.mysql.jdbc.Driver";
String userName = "root";
String password = "abhiram";
SearchName.setEditable(true);
         SearchGender.setEditable(true);
         AnimalIDSearch.setEditable(true);
        
          try

       {
            Class.forName(driver).newInstance();
            Connection conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            System.out.println("Database Connection Successful");

            String sql = "DELETE FROM animal WHERE ANIMAL_ID = ?";

            A.setAnimal_ID(AnimalSearchTable.getValueAt(0, 0).toString());
            prest = conn.prepareStatement(sql);
            prest.setString(1, A.getAnimal_ID());
            if(prest.executeUpdate()>0)
            {
            JOptionPane.showMessageDialog(null, "Record has been successfully deleted");
            }
            else
            {
               JOptionPane.showMessageDialog(null, "ERROR: Delete Runs for Animals Only!");
            }
            prest.close();
            conn.close();

       }
        catch (Exception e)
        {
        e.printStackTrace();
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void displayImage(){
        JFrame frame = new JFrame();
        ImageIcon icon = new ImageIcon("C..\\..\\..\\..\\ZooWebpage\\static\\images\\animals\\LION.jpg");
        JLabel label = new JLabel(icon);
        img.setIcon(icon);
        frame.add(label);
        frame.setDefaultCloseOperation
               (JFrame.EXIT_ON_CLOSE);
        frame.pack();
      //  frame.setVisible(true);
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ManagerFrame Frame1= new ManagerFrame ();
        Frame1.setVisible(true);

        setVisible(false);//this line and the one below close the login form.
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AnimalIDSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AnimalIDSearchFocusGained

        SearchName.setEditable(false);
        SearchGender.setEditable(false);
    }//GEN-LAST:event_AnimalIDSearchFocusGained

    private void SearchNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchNameFocusGained
        AnimalIDSearch.setEditable(false);
        SearchGender.setEditable(false);
    }//GEN-LAST:event_SearchNameFocusGained

    private void SearchGenderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchGenderFocusGained
        AnimalIDSearch.setEditable(false);
        SearchName.setEditable(false);
    }//GEN-LAST:event_SearchGenderFocusGained

    private void AnimalIDSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnimalIDSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnimalIDSearchActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchAnimal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnimalIDSearch;
    private javax.swing.JComboBox AnimalSCB1;
    private javax.swing.JButton AnimalSearch;
    private javax.swing.JTable AnimalSearchTable;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField SearchGender;
    private javax.swing.JTextField SearchName;
    private javax.swing.JButton Update;
    private javax.swing.JLabel img;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
